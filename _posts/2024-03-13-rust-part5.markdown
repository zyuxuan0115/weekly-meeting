---
layout: post
title:  "2024-03-13 Rust part5 (concurrency)"
date:   2024-03-13 1:53:49 -0500
categories: serverless functions
---

## Chapter 16
### Creating a New Thread

```rust 
use std::thread;
use std::time::Duration;

fn main() {
    let handle = thread::spawn(|| {
        for i in 1..10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    for i in 1..5 {
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }

    handle.join().unwrap();
}
```

The return type of `thread::spawn` is `JoinHandle`. A `JoinHandle` is an owned value that, when we call the join method on it, will wait for its thread to finish.

### Using move Closures with Threads

```rust 
use std::thread;

fn main() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(move || {
        println!("Here's a vector: {:?}", v);
    });

    handle.join().unwrap();
}
```

### Using Message Passing to Transfer Data Between Threads

Rust's standard library provides an implementation of channels. A channel is a general programming concept by which data is sent from one thread to another.


`mpsc` stands for <strong>multiple producer, single consumer</strong>.

A channel can have multiple sending ends that produce values but only one receiving end.

The mpsc::channel function returns a tuple (tx, rx): 
- `tx`: transmitter 
- `rx`: receiver

```rust
use std::sync::mpsc;
use std::thread;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let val = String::from("hi");
        tx.send(val).unwrap();
    });

    let received = rx.recv().unwrap();
    println!("Got: {}", received);
}
```
