---
layout: post
title:  "2022-12-29 adding reversed BAT to BOLT"
date:   2022-12-29 10:53:46 -0500
categories: cont-opt 
---

### the problem for using the C1 round perf.data directly
- not as efficient as the offline BOLT
	+ Directly using profile collected from C1 round to build an optimized mysqld and then run this mysqld.
		* The tput is <strong>8293.24 per sec</strong>.
```
...
[ 175s ] thds: 4 tps: 8276.81 qps: 99318.69 (r/w/o: 82765.07/0.00/16553.61) lat (ms,95%): 0.50 err/s: 0.00 reconn/s: 0.00
[ 176s ] thds: 4 tps: 8370.55 qps: 100452.66 (r/w/o: 83711.55/0.00/16741.11) lat (ms,95%): 0.49 err/s: 0.00 reconn/s: 0.00
[ 177s ] thds: 4 tps: 8377.05 qps: 100522.57 (r/w/o: 83768.47/0.00/16754.10) lat (ms,95%): 0.50 err/s: 0.00 reconn/s: 0.00
[ 178s ] thds: 4 tps: 8234.68 qps: 98831.15 (r/w/o: 82361.79/0.00/16469.36) lat (ms,95%): 0.50 err/s: 0.00 reconn/s: 0.00
[ 179s ] thds: 4 tps: 8248.70 qps: 98981.42 (r/w/o: 82484.02/0.00/16497.40) lat (ms,95%): 0.50 err/s: 0.00 reconn/s: 0.00
SQL statistics:
    queries performed:
        read:                            14928600
        write:                           0
        other:                           2985720
        total:                           17914320
    transactions:                        1492860 (8293.24 per sec.)
    queries:                             17914320 (99518.93 per sec.)
```
	+ However for the offline BOLTed binary
		*  the throughput is <strong> 9267.79 per sec </strong>.
```
...
[ 175s ] thds: 4 tps: 9119.03 qps: 109432.36 (r/w/o: 91192.30/0.00/18240.06) lat (ms,95%): 0.49 err/s: 0.00 reconn/s: 0.00
[ 176s ] thds: 4 tps: 9363.93 qps: 112382.18 (r/w/o: 93654.32/0.00/18727.86) lat (ms,95%): 0.44 err/s: 0.00 reconn/s: 0.00
[ 177s ] thds: 4 tps: 9242.96 qps: 110898.58 (r/w/o: 92413.65/0.00/18484.93) lat (ms,95%): 0.45 err/s: 0.00 reconn/s: 0.00
[ 178s ] thds: 4 tps: 9361.03 qps: 112351.31 (r/w/o: 93628.26/0.00/18723.05) lat (ms,95%): 0.44 err/s: 0.00 reconn/s: 0.00
[ 179s ] thds: 4 tps: 9259.09 qps: 111106.06 (r/w/o: 92587.88/0.00/18518.18) lat (ms,95%): 0.45 err/s: 0.00 reconn/s: 0.00
SQL statistics:
    queries performed:
        read:                            16682910
        write:                           0
        other:                           3336582
        total:                           20019492
    transactions:                        1668291 (9267.79 per sec.)
    queries:                             20019492 (111213.45 per sec.)
```

### The reason why profile data collected from C1 round is worse
- `perf2bolt` discard LBR records 
	+ because the mismatch between the profile collected from C1 round and the offline BOLTed binary
	+ ![pic](/assets/2022-12-12/code_layout.png)


### The way to fix C1 round profile data
- We need to recover those LBR records that are discarded by `perf2bolt` 
- How to recover?
	+ if the addresses read from LBR is in the holes of the BOLTed text section
		* change the addresses in the holes of the BOLTed text section to be the "fake addresses"
		* "fake addresses" are the BOTLed addresses of the corresponding original instructions 
	+ to change addresses to be the "fake addresses", we need a reversed BAT. 
		* a reversed BAT has the `original address -> BOLTed address` mapping
	+ what we need to do with the reversed BAT
		* construct a `reversed BAT`  when the `BAT` is constructed.
		* store the `reversed BAT` into the BOLTed binary when the BOLTed binary is produced by `llvm-bolt`
		* when running `perf2bolt` with the offline BOLTed binary and the C1 round perf.data, also read the `reversed BAT` from the BOLTed binary
		* use the `reversed BAT` to get the BOLTed address of the given address in the original text section


Recall the output of `BAT dump`
```
Function Address: 0x4800200
BB mappings:
0x0 -> 0x0
0x24 -> 0x24 (branch)
0x26 -> 0x26
0x31 -> 0x31 (branch)
0x33 -> 0x70
0x3c -> 0x79 (branch)
0x3d -> 0x33
0x44 -> 0x3a
0x56 -> 0x4c (branch)
0x57 -> 0x50
0x61 -> 0x5a (branch)
0x63 -> 0x5c
0x75 -> 0x6e (branch)
...
```

According [BAT.h](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/include/bolt/Profile/BoltAddressTranslation.h), `BAT` is stored in [std::map<uint64_t, MapTy> Maps;](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/include/bolt/Profile/BoltAddressTranslation.h#L121)
- the key of `Maps` is the starting address of a BOLTed function
- the value of the `Maps` is another `std::map<uint32_t, uint32_t>` (aka. `MapTy`), whose key is the offset of the BOLTed insn and value is the offset of the original insn

However, what we need is `original address -> BOLTed address`, so we need to reconstruction a BAT.
- In `llvm-bolt`'s rewriteInstance class, it has the following 2 functions to write BAT into the BOLTed binary
	+ [RewriteInstance::addBATSection()](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/lib/Rewrite/RewriteInstance.cpp#L4217)
	+ [RewriteInstance::encodeBATSection()](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/lib/Rewrite/RewriteInstance.cpp#L4233)
		* in `encodeBATSection()`, [BAT->write(*BC, DescOS)](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/lib/Rewrite/RewriteInstance.cpp#L4237) extract data to BAT's private member `Maps`.
		* this `write()` function is in [BAT.cpp](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/lib/Profile/BoltAddressTranslation.cpp)
- To also write the reversed BAT to the BOLTed binary, I added 2 functions
	+ [RewriteInstance::addReversedBATSection()](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/lib/Rewrite/RewriteInstance.cpp#L4224)
		* to register the reversed BAT to the BOLTed binary's note section, the first argument passed to `BC->registerOrUpdateNoteSection` becomes to `BoltAddressTranslation::SECTION_NAME_REVERSED_BAT`.
		
	+ [RewriteInstance::encodeReversedBATSection()](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/lib/Rewrite/RewriteInstance.cpp#L4250)
		* instead of extracting BAT and write BAT to the output stream by [BAT->write()](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/lib/Profile/BoltAddressTranslation.cpp#L117), I wrote another function [BAT->writeReverse()](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/lib/Profile/BoltAddressTranslation.cpp#L185) in [BAT.cpp](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/lib/Profile/BoltAddressTranslation.cpp).
		* the reason is to do this change is because
			- [BAT->write()](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/lib/Profile/BoltAddressTranslation.cpp#L117) returns `address -> [address -> address]` 
			- This is `BOLTed func starting addr -> [BOLTed insn offset -> original insn offset] `
			- [BAT->writeReverse()](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/lib/Profile/BoltAddressTranslation.cpp#L185) returns `address -> address` 
			- `original insn address -> BOLTed insn address`
			
		* to encode ELF note of reversed BAT, the first argument passed to `BinarySection::encodeELFNote()` becomes to `BinarySection::NT_BOLT_REVERSED_BAT`. 
			- this requires to add `NT_BOLT_REVERSED_BAT` to `BinarySection`'s [enum](https://github.com/zyuxuan0115/llvm-project/blob/main/bolt/include/bolt/Core/BinarySection.h#L485)
- After adding these changes, `llvm-bolt` can add `reversed BAT` into the note section of the BOLTed binary.
	+ after the command 
	+ `llvm-bolt mysqld -o mysqld.bolt --enable-bat -data=perf.fdata -reorder-blocks=cache+ -reorder-functions=hfsort` 
	+ is run, <strong>llvm-bolt</strong> has the following output:
```
BOLT-WARNING: '-reorder-blocks=cache+' is deprecated, please use '-reorder-blocks=ext-tsp' instead
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: 24b54c4b0a751a93df3f3b58056cc4c52ab56b89
BOLT-INFO: first alloc address is 0x200000
BOLT-INFO: creating new program header table at address 0x4400000, offset 0x4200000
BOLT-WARNING: debug info will be stripped from the binary. Use -update-debug-sections to keep it.
BOLT-INFO: enabling relocation mode
BOLT-INFO: enabling lite mode
BOLT-WARNING: split function detected on input : _ZL28delete_dictionary_tablespacev.cold/1. The support is limited in relocation mode
BOLT-WARNING: disabling lite mode (-lite) when split functions are present
BOLT-INFO: pre-processing profile using branch profile reader
BOLT-INFO: 1195 out of 67428 functions in the binary (1.8%) have non-empty execution profile
BOLT-INFO: 10 functions with profile could not be optimized
BOLT-INFO: profile for 1 objects was ignored
BOLT-INFO: the input contains 6915 (dynamic count : 309258) opportunities for macro-fusion optimization. Will fix instances on a hot path.
BOLT-INFO: 477257 instructions were shortened
BOLT-INFO: removed 175126 empty blocks
BOLT-INFO: basic block reordering modified layout of 748 functions (62.59% of profiled, 1.10% of total)
BOLT-INFO: UCE removed 1 blocks and 10 bytes of code.
BOLT-INFO: 25 Functions were reordered by LoopInversionPass
BOLT-INFO: SCTC: patched 2956 tail calls (2937 forward) tail calls (19 backward) from a total of 2956 while removing 30 double jumps and removing 2818 basic blocks totalling 14051 bytes of code. CTCs total execution count is 115003 and the number of times CTCs are taken is 20342.
BOLT-INFO: setting __hot_start to 0x4600000
BOLT-INFO: setting __hot_end to 0x4700ce4
BOLT-INFO: patched build-id (flipped last bit)
BOLT-INFO: Wrote 67427 BAT maps
BOLT-INFO: Wrote 0 BAT cold-to-hot entries
BOLT-INFO: Wrote 2430290 Reversed BAT maps
```
	+ And if we run `readelf -S mysqld.bolt`, we get
```
There are 44 section headers, starting at offset 0xab0ae00:
Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         0000000000200350  00000350
       000000000000001c  0000000000000000   A       0     0     1
  [ 2] .note.ABI-tag     NOTE             000000000020036c  0000036c
       0000000000000020  0000000000000000   A       0     0     4
  [ 3] .note.gnu.build-i NOTE             000000000020038c  0000038c
       0000000000000018  0000000000000000   A       0     0     4
  [ 4] .note.gnu.propert NOTE             00000000002003a8  000003a8
       0000000000000020  0000000000000000   A       0     0     8
  [ 5] .dynsym           DYNSYM           00000000002003c8  000003c8
       00000000001b5628  0000000000000018   A       9     1     8
  [ 6] .gnu.version      VERSYM           00000000003b59f0  001b59f0
       000000000002472e  0000000000000002   A       5     0     2
  [ 7] .gnu.version_r    VERNEED          00000000003da120  001da120
       0000000000000390  0000000000000000   A       9     9     4
  [ 8] .gnu.hash         GNU_HASH         00000000003da4b0  001da4b0
       000000000007a15c  0000000000000000   A       5     0     8
  [ 9] .dynstr           STRTAB           000000000045460c  0025460c
       0000000000656da5  0000000000000000   A       0     0     1
  [10] .rela.dyn         RELA             0000000000aab3b8  008ab3b8
       000000000002d3d8  0000000000000018   A       5     0     8
  [11] .rela.plt         RELA             0000000000ad8790  008d8790
       0000000000004620  0000000000000018  AI       5    30     8
  [12] .rodata           PROGBITS         0000000000adcdc0  008dcdc0
       0000000000cba0fc  0000000000000000 AMS       0     0     32
  [13] .bolt.org.eh_fram PROGBITS         0000000001796ec0  01596ec0
       0000000000280a7c  0000000000000000   A       0     0     8
  [14] .bolt.org.gcc_exc PROGBITS         0000000001a1793c  0181793c
       0000000000086729  0000000000000000   A       0     0     4
  [15] .bolt.org.eh_fram PROGBITS         0000000001a9e068  0189e068
       0000000000083af4  0000000000000000   A       0     0     4
  [16] .bolt.org.text    PROGBITS         0000000001b22b80  01921b80
       0000000001da2275  0000000000000000  AX       0     0     64
  [17] .init             PROGBITS         00000000038c4df8  036c3df8
       000000000000001b  0000000000000000  AX       0     0     4
  [18] .fini             PROGBITS         00000000038c4e14  036c3e14
       000000000000000d  0000000000000000  AX       0     0     4
  [19] .plt              PROGBITS         00000000038c4e30  036c3e30
       0000000000002ed0  0000000000000000  AX       0     0     16
  [20] .plt.sec          PROGBITS         00000000038c7d00  036c6d00
       0000000000002ec0  0000000000000000  AX       0     0     16
  [21] .tdata            PROGBITS         00000000038cbbc0  036c9bc0
       0000000000000008  0000000000000000 WAT       0     0     8
  [22] .tbss             NOBITS           00000000038cbbc8  036c9bc8
       00000000000000b0  0000000000000000 WAT       0     0     8
  [23] .fini_array       FINI_ARRAY       00000000038cbbc8  036c9bc8
       0000000000000008  0000000000000008  WA       0     0     8
  [24] .init_array       INIT_ARRAY       00000000038cbbd0  036c9bd0
       0000000000001508  0000000000000008  WA       0     0     8
  [25] .data.rel.ro      PROGBITS         00000000038cd0e0  036cb0e0
       0000000000171ce8  0000000000000000  WA       0     0     32
  [26] .dynamic          DYNAMIC          0000000003a3edc8  0383cdc8
       0000000000000220  0000000000000010  WA       9     0     8
  [27] .got              PROGBITS         0000000003a3efe8  0383cfe8
       0000000000000420  0000000000000000  WA       0     0     8
  [28] .data             PROGBITS         0000000003a40420  0383d420
       00000000003884b8  0000000000000000  WA       0     0     32
  [29] .tm_clone_table   PROGBITS         0000000003dc88d8  03bc58d8
       0000000000000000  0000000000000000  WA       0     0     8
  [30] .got.plt          PROGBITS         0000000003dc88d8  03bc58d8
       0000000000001778  0000000000000000  WA       0     0     8
  [31] .bss              NOBITS           0000000003dca080  03bc7050
       0000000000532129  0000000000000000  WA       0     0     64
  [32] .text             PROGBITS         0000000004600000  04400000
       0000000000108f64  0000000000000000  AX       0     0     2097152
  [33] .text.cold        PROGBITS         0000000004708f80  04508f80
       0000000001ba880d  0000000000000000  AX       0     0     64
  [34] .eh_frame         PROGBITS         00000000062b1790  060b1790
       00000000004f13cc  0000000000000000   A       0     0     8
  [35] .gcc_except_table PROGBITS         00000000067a2b5c  065a2b5c
       0000000000130091  0000000000000000   A       0     0     4
  [36] .eh_frame_hdr     PROGBITS         00000000068d2bf0  066d2bf0
       00000000001075dc  0000000000000000   A       0     0     1
  [37] .comment          PROGBITS         0000000000000000  067da1cc
       000000000000003f  0000000000000001  MS       0     0     1
  [38] .symtab           SYMTAB           0000000000000000  067da210
       00000000002ed7a8  0000000000000018          40   53263     8
  [39] .shstrtab         STRTAB           0000000000000000  06ac79b8
       000000000000027d  0000000000000000           0     0     1
  [40] .strtab           STRTAB           0000000000000000  06ac7c35
       00000000007de4f8  0000000000000000           0     0     1
  [41] .note.bolt_info   NOTE             0000000000000000  072a612d
       0000000000000160  0000000000000000           0     0     1
  [42] .note.bolt_bat    NOTE             0000000000000000  072a628d
       000000000134f628  0000000000000000           0     0     1
  [43] .note.bolt_revers NOTE             0000000000000000  085f58b5
       000000000251553c  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  l (large), p (processor specific)
```

