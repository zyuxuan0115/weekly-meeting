---
layout: post
title:  "2024-03-04 Rust part1 (ownership)"
date:   2024-03-04 1:53:46 -0500
categories: serverless functions
---
## From Rust [tutorial](https://doc.rust-lang.org/book/)
### Chapter 2
- if not specify, everything is inmutable
- an associated function is a function that’s implemented on a type: `String::new`
- `enum` is a type that can be in one of multiple possible states.
  + Result’s variants are `Ok` and `Err`. The `Ok` variant indicates the operation was successful, and inside `Ok` is the successfully generated value. The `Err` variant means the operation failed, and `Err` contains information about how or why the operation failed.
  + expect will cause the program to crash and display the message that you passed as an argument to expect
- running the `cargo doc --open` command will build documentation provided by all your dependencies locally and open it in your browser
- `let guess: u32 = guess.trim().parse().expect("Please type a number!");`
  + convert a rust string to an integer

### Chapter 3
- You aren’t allowed to use `mut` with constants, and the type of the value must be annotated.
- By using `let`, we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed.
- declare an array type

```rust
let a: [i32; 5] = [1, 2, 3, 4, 5];
let a = [3; 5]; // a = [3,3,3,3,3];
```

- In function signatures, you must declare the type of each parameter.
- If you add a semicolon to the end of an expression, you turn it into a statement, and it will then not return a value.
- For `if` statement, rust only executes the block for the first true condition, and once it finds one, it doesn’t even check the rest.
- Blocks of code evaluate to the last expression in them
  + so `let number = if condition { 5 } else { "six" };` is wrong.
- `loop`: you can add the value you want returned after the break expression you use to stop the loop; that value will be returned out of the loop so you can use it

```rust
let result = loop {
  counter += 1;

  if counter == 10 {
    break counter * 2;
  }
};
```

- You can optionally specify a loop label on a loop that you can then use with `break` or `continue` to specify that those keywords apply to the labeled loop instead of the innermost loop.

```rust
'counting_up: loop {
  println!("count = {count}");
  let mut remaining = 10;
  loop {
    println!("remaining = {remaining}");
    if remaining == 9 {
      break;
    }
    if count == 2 {
      break 'counting_up;
    }
    remaining -= 1;
  }
  count += 1;
}
```

### Chapter 4
#### Overview
<strong>Ownership</strong> is a set of rules that govern how a Rust program manages memory.
- Rust uses a third approach: memory is managed through a system of ownership with a set of rules that the compiler checks.
	+ The memory is automatically returned once the variable that owns it goes out of scope.
- None of the features of ownership will slow down your program while it’s running.

#### Stack vs Heap
- Pushing to the stack is faster than allocating on the heap because the allocator never has to search for a place to store new data; that location is always at the top of the stack. 
- Allocating space on the heap requires more work because the allocator must first find a big enough space to hold the data and then perform bookkeeping to prepare for the next allocation.
- The main purpose of ownership is to manage heap data.


#### Ownership Rules
- Each value in Rust has an owner.
- There can only be one owner at a time.
- When the owner goes out of scope, the value will be dropped.

#### Different types of strings

| type | Description | symbol |
| ----------- | ----------- |
| String | This type manages data allocated on the heap and as such is able to store an amount of text that is unknown to us at compile time. | String |
| the reference of a String| A <strong>reference</strong> is like a <strong>pointer</strong> in that it’s an address we can follow to access the     data stored at that address; that data is owned by some other variable. | &String |
| String slice | A string slice is a reference to part of a String | &str |
| string literals | a string value is hardcoded into the program | "Hello World" |



- how copying a string works
  + To ensure memory safety, after the line let s2 = s1;, Rust considers s1 as no longer valid.
	+ In this example, we would say that s1 was <strong>moved</strong> into s2.
  + Rust will never automatically create “deep” copies of your data.

```rust
let s1 = String::from("hello");
let s2 = s1;
```

![pic1](/assets/2024-03-04/trpl04-04.svg)

- deep copy

```rust
let s1 = String::from("hello");
let s2 = s1.clone();
```

- stack-only data copy
	+ The reason is that types such as integers that have a known size at compile time are stored entirely on the stack, so copies of the actual values are quick to make.
	+ If a type implements the `Copy` trait, variables that use it do not move, but rather are trivially copied, making them still valid after assignment to another variable.
	+ <strong>Tuples</strong>, if they only contain types that also implement Copy. For example, `(i32, i32)` implements Copy, but `(i32, String)` does not.

```rust
let x = 5;
let y = x;
```

#### Ownership of functions
- Passing a variable to a function will move or copy, just as assignment does.

```rust
fn main() {
    let s = String::from("hello");  // s comes into scope

    takes_ownership(s);             // s's value moves into the function...
                                    // ... and so is no longer valid here

    let x = 5;                      // x comes into scope

    makes_copy(x);                  // x would move into the function,
                                    // but i32 is Copy, so it's okay to still
                                    // use x afterward

} // Here, x goes out of scope, then s. But because s's value was moved, nothing
  // special happens.

fn takes_ownership(some_string: String) { // some_string comes into scope
    println!("{}", some_string);
} // Here, some_string goes out of scope and `drop` is called. The backing
  // memory is freed.

fn makes_copy(some_integer: i32) { // some_integer comes into scope
    println!("{}", some_integer);
} // Here, some_integer goes out of scope. Nothing special happens.
```

- Returning values can also transfer ownership.

```rust
fn main() {
    let s1 = gives_ownership();         // gives_ownership moves its return
                                        // value into s1

    let s2 = String::from("hello");     // s2 comes into scope

    let s3 = takes_and_gives_back(s2);  // s2 is moved into
                                        // takes_and_gives_back, which also
                                        // moves its return value into s3
} // Here, s3 goes out of scope and is dropped. s2 was moved, so nothing
  // happens. s1 goes out of scope and is dropped.

fn gives_ownership() -> String {             // gives_ownership will move its
                                             // return value into the function
                                             // that calls it

    let some_string = String::from("yours"); // some_string comes into scope

    some_string                              // some_string is returned and
                                             // moves out to the calling
                                             // function
}

// This function takes a String and returns one
fn takes_and_gives_back(a_string: String) -> String { // a_string comes into
                                                      // scope

    a_string  // a_string is returned and moves out to the calling function
}
```

#### A feature for using a value without transferring ownership, reference
- A <strong>reference</strong> is like a <strong>pointer</strong> in that it’s an address we can follow to access the data stored at that address; that data is owned by some other variable.

```rust
fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}.", s1, len);
}

fn calculate_length(s: &String) -> usize {
    s.len()
}
```

![pic2](/assets/2024-03-04/trpl04-05.svg)

- Because `s` does not own `s1`, the value it points to will not be dropped when the reference stops being used.
- This is called <strong>borrowing</strong>.
- <strong>Mutable references</strong> have one big <strong>restriction</strong>: if you have a mutable reference to a value, you can have no other references to that value. 
	+ Rust can <strong> prevent data races at compile time</strong>.
	+ <strong>Solution for using multiple references</strong>: we can use curly brackets to create a new scope, allowing for multiple mutable references 

```rust
let mut s = String::from("hello");
let r1 = &mut s;
let r2 = &mut s; // BIG PROBLEM
println!("{}, {}", r1, r2);
```

```rust
let mut s = String::from("hello");
let r1 = &s; // no problem
let r2 = &s; // no problem
let r3 = &mut s; // BIG PROBLEM
println!("{}, {}, and {}", r1, r2, r3);
```

- We also cannot have a mutable reference while we have an immutable one to the same value.

- `But, this is OK`

```rust
let mut s = String::from("hello");
let r1 = &s; // no problem
let r2 = &s; // no problem
println!("{} and {}", r1, r2);
// variables r1 and r2 will not be used after this point
let r3 = &mut s; // no problem
println!("{}", r3);
```

- <strong>dangling pointer</strong> — a pointer that references a location in memory that may have been given to someone else — by freeing some memory while preserving a pointer to that memory.

```rust
fn dangle() -> &String { // dangle returns a reference to a String
    let s = String::from("hello"); // s is a new String
    &s // we return a reference to the String, s
} // Here, s goes out of scope, and is dropped. Its memory goes away.
  // Danger!
```

The solution here is to return the String directly, not the reference

```rust
fn no_dangle() -> String {
    let s = String::from("hello");
    s
}
```

#### Slice Type
Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection. A slice is a kind of reference, so it does not have ownership.
- A string slice is a reference to part of a String.

- how do you iterate through the chars in the `String` 

```rust
fn first_word(s: &String) -> &str {
    let bytes = s.as_bytes();

    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }

    &s[..]
}
```

#### String Literals
- `let s = "Hello, world!";`, `s`'s type is `&str`
- If we have a string slice, we can pass that directly. If we have a String, we can pass a slice of the String or a reference to the String

```rust
fn main() {
    let my_string = String::from("hello world");

    // `first_word` works on slices of `String`s, whether partial or whole
    let word = first_word(&my_string[0..6]);
    let word = first_word(&my_string[..]);
    // `first_word` also works on references to `String`s, which are equivalent
    // to whole slices of `String`s
    let word = first_word(&my_string);

    let my_string_literal = "hello world";

    // `first_word` works on slices of string literals, whether partial or whole
    let word = first_word(&my_string_literal[0..6]);
    let word = first_word(&my_string_literal[..]);

    // Because string literals *are* string slices already,
    // this works too, without the slice syntax!
    let word = first_word(my_string_literal);
}
```
