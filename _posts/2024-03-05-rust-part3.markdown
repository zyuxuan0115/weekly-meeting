---
layout: post
title:  "2024-03-05 Rust part3"
date:   2024-03-05 1:53:49 -0500
categories: serverless functions
---
## Chapter 8
### vector
#### create a vector

```rust
let v1: Vec<i32> = Vec::new();
let v2 = vec![1, 2, 3];
let mut v3 = Vec::new();
v3.push(5);
v3.push(6);
v3.push(7);
v3.push(8);
```

#### Reading Elements of Vectors

- There are two ways to reference a value stored in a vector: via indexing or using the `get` method.
	+ Using `&` and `[]` gives us a reference to the element at the index value.

```rust
let v = vec![1, 2, 3, 4, 5];
let third: &i32 = &v[2];
println!("The third element is {third}");

let third: Option<&i32> = v.get(2);
match third {
   Some(third) => println!("The third element is {third}"),
   None => println!("There is no third element."),
}
```

#### Iterating over the Values in a Vector

```rust
let mut v = vec![100, 32, 57];
for i in &mut v {
   *i += 50;
}
```

here `&mut` means

- We can also iterate over mutable references to each element in a mutable vector in order to make changes to all the elements.
- We have to use the `*` dereference operator to get to the value in `i` before we can use the `+=` operator. 

#### Combining with enum to store multiple types

```rust
enum SpreadsheetCell {
  Int(i32),
  Float(f64),
  Text(String),
}

let row = vec![
  SpreadsheetCell::Int(3),
  SpreadsheetCell::Text(String::from("blue")),
  SpreadsheetCell::Float(10.12),
];
```

- Like any other struct, a vector is freed when it goes out of scope.
- When the vector gets dropped, all of its contents are also dropped.
