---
layout: post
title:  "2024-03-04 Rust part2"
date:   2024-03-04 1:53:49 -0500
categories: serverless functions
---
## From Rust [tutorial](https://doc.rust-lang.org/book/)
### Chapter 5
- structs are more flexible than tuples: you don’t have to rely on the order of the data to specify or access the values of an instance.

```rust
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}

fn main() {
    let mut user1 = User {
        active: true,
        username: String::from("someusername123"),
        email: String::from("someone@example.com"),
        sign_in_count: 1,
    };
    user1.email = String::from("anotheremail@example.com");
}
```

- Note that the entire instance must be mutable; Rust doesn’t allow us to mark only certain fields as mutable.

- a builder function of a struct

```rust
fn build_user(email: String, username: String) -> User {
    User {
        active: true,
        username,
        email,
        sign_in_count: 1,
    }
}
```
