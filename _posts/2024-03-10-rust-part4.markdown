---
layout: post
title:  "2024-03-10 Rust part4 (closure)"
date:   2024-03-10 1:53:49 -0500
categories: serverless functions
---

## Chapter 13
<strong>Programming in a functional style often includes using functions as values by passing them in arguments, returning them from other functions, assigning them to variables for later execution, and so forth. </strong>

### Closure

- Rust’s closures are anonymous functions you can save in a variable or pass as arguments to other functions. 
- You can create the closure in one place and then call the closure elsewhere to evaluate it in a different context. 
- Unlike functions, closures can capture values from the scope in which they’re defined.

```rust
#[derive(Debug, PartialEq, Copy, Clone)]
enum ShirtColor {
    Red,
    Blue,
}

struct Inventory {
    shirts: Vec<ShirtColor>,
}

impl Inventory {
    fn giveaway(&self, user_preference: Option<ShirtColor>) -> ShirtColor {
        user_preference.unwrap_or_else(|| self.most_stocked())
    }

    fn most_stocked(&self) -> ShirtColor {
        let mut num_red = 0;
        let mut num_blue = 0;

        for color in &self.shirts {
            match color {
                ShirtColor::Red => num_red += 1,
                ShirtColor::Blue => num_blue += 1,
            }
        }
        if num_red > num_blue {
            ShirtColor::Red
        } else {
            ShirtColor::Blue
        }
    }
}

fn main() {
    let store = Inventory {
        shirts: vec![ShirtColor::Blue, ShirtColor::Red, ShirtColor::Blue],
    };

    let user_pref1 = Some(ShirtColor::Red);
    let giveaway1 = store.giveaway(user_pref1);
    println!(
        "The user with preference {:?} gets {:?}",
        user_pref1, giveaway1
    );

    let user_pref2 = None;
    let giveaway2 = store.giveaway(user_pref2);
    println!(
        "The user with preference {:?} gets {:?}",
        user_pref2, giveaway2
    );
}
```
Notes:
- The `unwrap_or_else` method on `Option<T>` is defined by the standard library. It takes one argument: a closure without any arguments that returns a value `T` (the same type stored in the Some variant of the `Option<T>`
- If the `Option<T>` is the `Some` variant, `unwrap_or_else` returns the value from within the `Some`. If the `Option<T>` is the `None` variant, `unwrap_or_else` calls the closure and returns the value returned by the closure.
- We specify the closure expression `|| self.most_stocked()` as the argument to `unwrap_or_else`. 
	+ if the closure had parameters, they would appear between the two vertical bars.

- Closures don’t usually require you to annotate the types of the parameters or the return value like fn functions do.

<strong>An example of defining a closure</strong>

```rust
let expensive_closure = |num: u32| -> u32 {
  println!("calculating slowly...");
  thread::sleep(Duration::from_secs(2));
  num
};
```

<strong>fn vs. closure</strong>

```rust
fn  add_one_v1   (x: u32) -> u32 { x + 1 }
let add_one_v2 = |x: u32| -> u32 { x + 1 };
let add_one_v3 = |x|             { x + 1 };
let add_one_v4 = |x|               x + 1  ;
```

`add_one_v3` and `add_one_v4` lines require compiler to infer the type of `x` when `add_one_v3` and `add_one_v4` are called.

#### Capturing References or Moving Ownership
Closures can capture values from their environment in three ways:
- borrowing immutably
- borrowing mutably
- taking ownership
	+ If you want to force the closure to take ownership of the values it uses in the environment even though the body of the closure doesn’t strictly need ownership, you can use the `move` keyword before the parameter list. 

```rust
use std::thread;

fn main() {
    let list = vec![1, 2, 3];
    println!("Before defining closure: {:?}", list);

    thread::spawn(move || println!("From thread: {:?}", list))
        .join()
        .unwrap();
}
```

We spawn a new thread, giving the thread a closure to run as an argument.

#### Moving Captured Values Out of Closures and the Fn Traits

- Closures will automatically implement one, two, or all three of these `Fn` traits
	+ `FnOnce` applies to closures that can be called once. 
		* A closure that moves captured values out of its body will only implement `FnOnce` and none of the other `Fn` traits, because it can only be called once.
	+ `FnMut` applies to closures that don’t move captured values out of their body, but that might mutate the captured values. These closures can be called more than once.
	+ `Fn` applies to closures that don’t move captured values out of their body and that don’t mutate captured values, as well as closures that capture nothing from their environment. These closures can be called more than once without mutating their environment, which is important in cases such as calling a closure multiple times concurrently.

- `FnOnce` example 

```rust
impl<T> Option<T> {
    pub fn unwrap_or_else<F>(self, f: F) -> T
    where
        F: FnOnce() -> T
    {
        match self {
            Some(x) => x,
            None => f(),
        }
    }
}
```

- `FnMut` example

```rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let mut list = [
        Rectangle { width: 10, height: 1 },
        Rectangle { width: 3, height: 5 },
        Rectangle { width: 7, height: 12 },
    ];

    list.sort_by_key(|r| r.width);
    println!("{:#?}", list);
}
```

`r.width` can be called multiple times.

### Iterators

When you use iterators, you don’t have to reimplement that logic yourself.

In Rust, iterators are <strong>lazy</strong>, meaning they have no effect until you call methods that consume the iterator to use it up.

```rust
let v1 = vec![1, 2, 3];
let v1_iter = v1.iter();
for val in v1_iter {
  println!("Got: {}", val);
}
```

#### The Iterator Trait and the next Method

```rust
pub trait Iterator {
    type Item;
    fn next(&mut self) -> Option<Self::Item>;
    // methods with default implementations elided
}
```

Implementing the Iterator trait requires that you also define an Item type, and this `Item` type is used in the return type of the `next` method. In other words, the `Item` type will be the type returned from the iterator.

The Iterator trait only requires implementors to define one method: the next method, which returns one item of the `iterator` at a time wrapped in `Some` and, when iteration is over, returns `None`.

```rust
fn iterator_demonstration() {
  v1 = vec![1, 2, 3];
  let mut v1_iter = v1.iter();

  assert_eq!(v1_iter.next(), Some(&1));
  assert_eq!(v1_iter.next(), Some(&2));
  assert_eq!(v1_iter.next(), Some(&3));
  assert_eq!(v1_iter.next(), None);
}
```

Note that we needed to make `v1_iter` mutable: calling the next method on an iterator changes internal state that the iterator uses to keep track of where it is in the sequence.

We didn’t need to make `v1_iter` mutable when we used a for loop because the loop took ownership of `v1_iter` and made it mutable behind the scenes.

- The iter method produces an iterator over immutable references.
	+ the values we get from the calls to `next` are immutable references to the values in the vector.
	+ If we want to create an iterator that takes ownership of `v1` and returns owned values, we can call `into_iter` instead of `iter`.

#### Methods that Consume the Iterator
Methods that call next are called <strong>consuming adaptors</strong>, because calling them uses up the iterator.

```rust
fn iterator_sum() {
  let v1 = vec![1, 2, 3];
  let v1_iter = v1.iter();
  let total: i32 = v1_iter.sum();
  assert_eq!(total, 6);
}
```

- <strong>sum method</strong>
takes ownership of the iterator and iterates through the items by repeatedly calling `next`, thus consuming the iterator. As it iterates through, it adds each item to a running total and returns the total when iteration is complete.

We aren’t allowed to use `v1_iter` after the call to `sum` because `sum` takes ownership of the iterator we call it on.

#### Methods that Produce Other Iterators

`Iterator adaptors` are methods defined on the `Iterator` trait that don’t consume the iterator.

Instead, they produce different iterators by changing some aspect of the original iterator.

```rust
let v1: Vec<i32> = vec![1, 2, 3];
let v2: Vec<_> = v1.iter().map(|x| x + 1).collect();
assert_eq!(v2, vec![2, 3, 4]);
```

- <strong>map method </strong>
Map takes a closure to call on each item as the items are iterated through. The map method returns a new iterator that produces the modified items.

To consume the new iterator, we’ll use the `collect` method

#### Using Closures that Capture Their Environment

- <strong>filter method</strong>

The closure gets an item from the iterator and returns a `bool`. If the closure returns `true`, the value will be included in the iteration produced by filter. If the closure returns `false`, the value won’t be included.

```rust
#[derive(PartialEq, Debug)]
struct Shoe {
    size: u32,
    style: String,
}

fn shoes_in_size(shoes: Vec<Shoe>, shoe_size: u32) -> Vec<Shoe> {
    shoes.into_iter().filter(|s| s.size == shoe_size).collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn filters_by_size() {
        let shoes = vec![
            Shoe {
                size: 10,
                style: String::from("sneaker"),
            },
            Shoe {
                size: 13,
                style: String::from("sandal"),
            },
            Shoe {
                size: 10,
                style: String::from("boot"),
            },
        ];

        let in_my_size = shoes_in_size(shoes, 10);

        assert_eq!(
            in_my_size,
            vec![
                Shoe {
                    size: 10,
                    style: String::from("sneaker")
                },
                Shoe {
                    size: 10,
                    style: String::from("boot")
                },
            ]
        );
    }
}
```


## Chapter 15 
<strong>Smart pointers</strong> are data structures that act like a pointer but also have additional metadata and capabilities.

- Rust has an additional difference between references and smart pointers: while references only borrow data, in many cases, smart pointers own the data they point to.

- Smart pointers are usually implemented using structs.
	+ Unlike an ordinary struct, smart pointers implement the `Deref` and `Drop` traits.
		* The `Deref` trait allows an instance of the smart pointer struct to behave like a reference.
		* The `Drop` trait allows you to customize the code that’s run when an instance of the smart pointer goes out of scope.

### Box 
- `Box<T>`
- Boxes allow you to store data on the heap rather than the stack.
- When do you want to use `Box`:
	+ When you have a type whose size can’t be known at compile time and you want to use a value of that type in a context that requires an exact size
	+ When you have a large amount of data and you want to transfer ownership but ensure the data won’t be copied when you do so
	+ When you want to own a value and you care only that it’s a type that implements a particular trait rather than being of a specific type

```rust
fn main() {
    let b = Box::new(5);
    println!("b = {}", b);
}
```

We define the variable b to have the value of a `Box` that points to the value 5, which is allocated on the heap.

- when a box goes out of scope, it will be deallocated.
	+ The deallocation happens both for the box (stored on the stack) and the data it points to (stored on the heap).

#### Enabling Recursive Types with Boxes

A value of <strong>recursive type</strong> can have another value of the same type as part of itself.

Because a `Box<T>` is a pointer, Rust always knows how much space a `Box<T>` needs: a pointer’s size doesn’t change based on the amount of data it’s pointing to. This means we can put a `Box<T>` inside the Cons variant instead of another List value directly.

- Why is `Box<T>` a pointer? 
	+ Because Box is a struct (tuple struct) with only one element.
	+ <strong>a struct returns a pointer! </strong> (think about C struct!!!)

```rust
enum List {
    Cons(i32, Box<List>),
    Nil,
}

use crate::List::{Cons, Nil};

fn main() {
    let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil))))));
}
```

### Deref Trait of Box

```rust
fn main() {
    let x = 5;
    let y = Box::new(x);

    assert_eq!(5, x);
    assert_eq!(5, *y);
}
```

#### How Box is defined

The `Box<T>` type is ultimately defined as a <strong>tuple struct</strong> with one element.

```rust
// MyBox is similiar to Box
struct MyBox<T>(T);

impl<T> MyBox<T> {
    fn new(x: T) -> MyBox<T> {
        MyBox(x)
    }
}
```

To enable dereferencing with the `*` operator, we implement the `Deref` trait.

```rust
use std::ops::Deref;

impl<T> Deref for MyBox<T> {
    type Target = T;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
```

When we entered `*y`, behind the scenes Rust actually ran this code:

```rust
*(y.deref())
```

#### Implicit Deref Coercions with Functions and Methods

Deref coercion is a convenience Rust performs on arguments to functions and methods, and works only on types that implement the Deref trait. 

It happens automatically when we pass a reference to a particular type’s value as an argument to a function or method that doesn’t match the parameter type in the function or method definition.

Deref coercion was added to Rust so that programmers writing function and method calls don’t need to add as many explicit references and dereferences with `&` and `*`. 

The deref coercion feature also lets us write more code that can work for either references or smart pointers.

```rust
fn main() {
    let m = MyBox::new(String::from("Rust"));
    hello(&m);
}
```

without deref coercion, we will have to use this: 

```rust
fn main() {
    let m = MyBox::new(String::from("Rust"));
    hello(&(*m)[..]);
}
```

When the Deref trait is defined for the types involved, Rust will analyze the types and use `Deref::deref` as many times as necessary to get a reference to match the parameter’s type.

### Drop trait of Box

Drop trait lets you customize what happens when a value is about to go out of scope.

```rust
struct CustomSmartPointer {
    data: String,
}

impl Drop for CustomSmartPointer {
    fn drop(&mut self) {
        println!("Dropping CustomSmartPointer with data `{}`!", self.data);
    }
}

fn main() {
    let c = CustomSmartPointer {
        data: String::from("my stuff"),
    };
    let d = CustomSmartPointer {
        data: String::from("other stuff"),
    };
    println!("CustomSmartPointers created.");
}
```

Variables are dropped in the reverse order of their creation.

#### Dropping a Value Early with std::mem::drop

Rust doesn’t let you call the Drop trait’s drop method manually; instead you have to call the `std::mem::drop` function provided by the standard library if you want to force a value to be dropped before the end of its scope.

The `std::mem::drop` function is different from the `drop` method in the `Drop` trait. We call it by passing as an argument the value we want to force drop.

```rust
fn main() {
    let c = CustomSmartPointer {
        data: String::from("some data"),
    };
    println!("CustomSmartPointer created.");
    drop(c);
    println!("CustomSmartPointer dropped before the end of main.");
}
```

### Rc
- there are cases when a single value might have multiple owners
- You have to enable multiple ownership explicitly by using the Rust type `Rc<T>`
	+ which is an abbreviation for reference counting.
	+ The `Rc<T>` type keeps track of the number of references to a value to determine whether or not the value is still in use.
	+ Note that `Rc<T>` is only for use in single-threaded scenarios. 

#### Using Rc to Share Data

![d1](/assets/2024-03-10/trpl15-03.svg)

we’ll change our definition of List to use `Rc<T>` in place of `Box<T>`

```rust
enum List {
    Cons(i32, Rc<List>),
    Nil,
}

use crate::List::{Cons, Nil};
use std::rc::Rc;

fn main() {
    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));
    let b = Cons(3, Rc::clone(&a));
    let c = Cons(4, Rc::clone(&a));
}
```

When we create `b`, instead of taking ownership of `a`, we’ll clone the `Rc<List>` that `a` is holding, thereby increasing the number of references.

The implementation of `Rc::clone` doesn’t make a deep copy of all the data like most types’ implementations of clone do. The call to `Rc::clone` only increments the reference count, which doesn’t take much time.

- How the counting works

```rust
fn main() {
    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));
    println!("count after creating a = {}", Rc::strong_count(&a));
    let b = Cons(3, Rc::clone(&a));
    println!("count after creating b = {}", Rc::strong_count(&a));
    {
        let c = Cons(4, Rc::clone(&a));
        println!("count after creating c = {}", Rc::strong_count(&a));
    }
    println!("count after c goes out of scope = {}", Rc::strong_count(&a));
}
```

the output should be:

```bash
> count after creating a = 1
> count after creating b = 2
> count after creating c = 3
> count after c goes out of scope = 2
```

### RefCell

Interior mutability is a design pattern in Rust that allows you to mutate data even when there are immutable references to that data; normally, this action is disallowed by the borrowing rules. To mutate data, the pattern uses unsafe code inside a data structure to bend Rust’s usual rules that govern mutation and borrowing.


