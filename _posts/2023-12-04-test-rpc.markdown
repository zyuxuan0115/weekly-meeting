---
layout: post
title:  "2023-12-04 socialMedia's RPC"
date:   2023-12-04 1:53:46 -0500
categories: serverless functions
---
### From nightcore's C++ workloads
- I made both `movieReview` and `socialNetwork` work on cloudlab machines 
- I checked if the `socialNetwork` workload contains the invocation `invoke_func_fn` 
	+ only nightcore [FaasWorker.h](https://github.com/zyuxuan0115/nightcore-test/blob/main/moviereview_singlenode/DeathStarBench/mediaMicroservices/src/FaasWorker.h) contains [invoke_func_fn_](https://github.com/zyuxuan0115/nightcore-test/blob/main/moviereview_singlenode/DeathStarBench/mediaMicroservices/src/FaasWorker.h)

![s1](/assets/2023-12-06/s1.png)

- I also check `movieReview` workload and it shows the same result.

```cpp
class ClientTransport : public apache::thrift::transport::TVirtualTransport<ClientTransport> {
public:
   ClientTransport(FaasWorker* parent, const std::string& func_name)
      : parent_(parent), func_name_(func_name) {}

   void write(const uint8_t* buf, uint32_t len) {
      out_buf_.write(buf, len);
   }

   uint32_t read(uint8_t* buf, uint32_t len) {
      return in_buf_.read(buf, len);
   }

   uint32_t readAll(uint8_t* buf, uint32_t len) {
      return in_buf_.readAll(buf, len);
   }

   void flush() override {
      uint8_t* data;
      uint32_t data_length;
      out_buf_.getBuffer(&data, &data_length);
      const char* output;
      size_t output_length;
      if (parent_->invoke_func_fn_(parent_->caller_context_, func_name_.c_str(),
                                   reinterpret_cast<const char*>(data),
                                   static_cast<size_t>(data_length),
                                   &output, &output_length) != 0) {
         throw apache::thrift::transport::TTransportException(
         apache::thrift::transport::TTransportException::UNKNOWN, "invoke_func call failed");
      }
      out_buf_.resetBuffer();
      in_buf_.resetBuffer(reinterpret_cast<uint8_t*>(const_cast<char*>(output)),
                          static_cast<uint32_t>(output_length));
      }

private:
   FaasWorker* parent_;
   std::string func_name_;
   apache::thrift::transport::TMemoryBuffer in_buf_;
   apache::thrift::transport::TMemoryBuffer out_buf_;
};
```

- almost all the serverless functions invoke `flush()`.

![s2](/assets/2023-12-06/s2.png)

- also, in real workloads, the way how one serverless function is declared is different from the sample code
	+ For example in [MovieReviewService.cpp](https://github.com/zyuxuan0115/nightcore-test/blob/main/moviereview_singlenode/DeathStarBench/mediaMicroservices/src/MovieReviewService/MovieReviewService.cpp)



### The call graph of the socialNetwork workload
![call_graph](/assets/2023-12-06/socialNet_arch.png)

- example: `Unique ID` only calls `Compose Post`
	+ in UniqueIdService's `faas_create_func_worker`, it calls [faas_worker->SetProcessor()](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/UniqueIdService.cpp#L56)
		* it sets the processor to be [UniqueIdServiceProcessor](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/gen-cpp/UniqueIdService.h#L212) which takes a [UniqueIdHandler](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/UniqueIdHandler.h#L50) as argument.
		* this means the serverless function to be processed is `Unique ID service`
	+ then in `faas_func_call`, it calls [faas_worker->Process()](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/UniqueIdService.cpp#L72)
		* in `class FaasWorker`'s [Process()](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/FaasWorker.h#L35) function, `Processor->Process()` will be called. 
	+ the `faas_worker->SetProcessor` and `faas_worker->Process` functions are both in [FaasWorker.h](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/FaasWorker.h) 
		* <strong>my guess</strong>: [process_UploadUniqueId()](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/gen-cpp/UniqueIdService.cpp#L342) in `UniqueIdServiceProcessor` class is the function that override `Processor->Precess()`
	+ another thing to be noticed
		* in unique ID's serverless function, [faas_worker->SetProcessor()](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/UniqueIdService.cpp#L56) also pass the callee function `compose post` as an argument 

#### things to compile
- based on the `Unique ID`, to generate the `libUniqueIdService.so`, we need at least the following files
	+ `src/UniqueIdService/UniqueIdService.cpp`
	+ `src/UniqueIdService/UniqueIdHandler.h`
	+ `src/FaasWorker.h`
	+ `gen-cpp/UniqueIdService.cpp`
	+ `gen-cpp/UniqueIdService.h`
	+ `gen-cpp/ComposePostService.cpp`
	+ `gen-cpp/ComposePostService.h`

### make the compilation of SocialNetwork workloads work
- unfortunately the serverless functions are compiled by `CMake`
	+ we are using `clang` + `opt`, so we need to convert CMake to normal shell commands.
	+ <strong>[the tutorial for cmake](https://www.internalpointers.com/post/modern-cmake-beginner-introduction)</strong>
	+ to run cmake, we need to install several dependencies:
		* <strong>from this [link](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/docker/cpp-microservice-deps/Dockerfile)</strong>
		* `nlohmann-json3-dev` (the c++ json parser): `sudo apt-get install nlohmann-json3-dev`
		* `boost library`: `sudo apt-get install libboost-all-dev`
		* also the `#include <memory>` & `#include <string_view>` in the workloads require adding `-std=c++17` to the makefile
- consider compiling `unique ID service`
	+ this is its [CMakeList.txt](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/CMakeLists.txt)
	+ previously we have [6 files](#things-to-compile) that must be compiled in order to generate `libUniqueIdService.so`


