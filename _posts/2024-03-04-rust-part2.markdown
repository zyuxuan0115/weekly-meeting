---
layout: post
title:  "2024-03-04 Rust part2"
date:   2024-03-04 1:53:49 -0500
categories: serverless functions
---
## From Rust [tutorial](https://doc.rust-lang.org/book/)
### Chapter 5
- structs are more flexible than tuples: you don’t have to rely on the order of the data to specify or access the values of an instance.

```rust
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}

fn main() {
    // the entire instance must be mutable; Rust doesn’t allow us to mark only certain fields as mutable.
    let mut user1 = User {
        active: true,
        username: String::from("someusername123"),
        email: String::from("someone@example.com"),
        sign_in_count: 1,
    };
    user1.email = String::from("anotheremail@example.com");
    // create one instance from another instance
    let user2 = User {
        email: String::from("another@example.com"),
        ..user1
    };
}
```

- Note that the struct update syntax uses = like an assignment; this is because it moves the data, just as we saw in the “Variables and Data Interacting with Move” section. In this example, we can no longer use user1 as a whole after creating user2 because the String in the username field of user1 was moved into user2.

- a builder function of a struct

```rust
fn build_user(email: String, username: String) -> User {
    User {
        active: true,
        username,
        email,
        sign_in_count: 1,
    }
}
```

#### tuple struct
Tuple structs are useful when you want to give the whole tuple a name and make the tuple a different type from other tuples, and when naming each field as in a regular struct would be verbose or redundant.

```rust
struct Color(i32, i32, i32);
struct Point(i32, i32, i32);

fn main() {
    // the black and origin values are different types
    let black = Color(0, 0, 0);
    let origin = Point(0, 0, 0);
}
```

#### Unit-Like Structs Without Any Fields
later we’ll implement behavior for this type such that every instance of AlwaysEqual is always equal to every instance of any other type, perhaps to have a known result for testing purposes.

```rust
struct AlwaysEqual;

fn main() {
    let subject = AlwaysEqual;
}
```

- Lifetimes ensure that the data referenced by a struct is valid for as long as the struct is.
- So the following code won't work. 

```rust
struct User {
    active: bool,
    username: &str,
    email: &str,
    sign_in_count: u64,
}

fn main() {
    let user1 = User {
        active: true,
        username: "someusername123",
        email: "someone@example.com",
        sign_in_count: 1,
    };
}
```


- The `println!` macro can do many kinds of formatting, and by default, the curly brackets tell `println!` to use formatting known as Display: output intended for direct end user consumption.
	+ structs don’t have a provided implementation of Display to use with `println!` and the `{}` placeholder.
  + Rust does include functionality to print out debugging information, but we have to explicitly opt in to make that functionality available for our struct. To do that, we add the outer attribute `#[derive(Debug)]` just before the struct definition

```rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };
    println!("rect1 is {:?}", rect1);
}
```

- Another way to print out a value using the Debug format is to use the `dbg!` macro, which takes ownership of an expression (as opposed to `println!`, which takes a reference), prints the file and line number of where that `dbg!` macro call occurs in your code along with the resultant value of that expression, and returns ownership of the value.
	+ Calling the dbg! macro prints to the standard error console stream (`stderr`), as opposed to `println!`, which prints to the standard output console stream (`stdout`)

```rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}
fn main() {
    let scale = 2;
    let rect1 = Rectangle {
        width: dbg!(30 * scale),
        height: 50,
    };
    dbg!(&rect1);
}
```

#### Method
- Unlike functions, methods are defined within the context of a struct (or an enum or a trait object, and <strong>their first parameter</strong> is always `self`, which represents the instance of the struct the method is being called on.

```rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!(
        "The area of the rectangle is {} square pixels.",
        rect1.area()
    );
}
```

- We start an `impl` (implementation) block for `Rectangle`. Everything within this `impl` block will be associated with the `Rectangle` type.
- Methods can take ownership of `self`, borrow `self` immutably, or borrow `self` mutably 
