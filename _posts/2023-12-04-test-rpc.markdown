---
layout: post
title:  "2023-12-04 socialMedia's RPC"
date:   2023-12-04 1:53:46 -0500
categories: serverless functions
---
### From nightcore's C++ workloads
- I made both `movieReview` and `socialNetwork` work on cloudlab machines 
- I checked if the `socialNetwork` workload contains the invocation `invoke_func_fn` 
	+ only nightcore [FaasWorker.h](https://github.com/zyuxuan0115/nightcore-test/blob/main/moviereview_singlenode/DeathStarBench/mediaMicroservices/src/FaasWorker.h) contains [invoke_func_fn_](https://github.com/zyuxuan0115/nightcore-test/blob/main/moviereview_singlenode/DeathStarBench/mediaMicroservices/src/FaasWorker.h)

![s1](/assets/2023-12-06/s1.png)

- I also check `movieReview` workload and it shows the same result.

```cpp
class ClientTransport : public apache::thrift::transport::TVirtualTransport<ClientTransport> {
public:
   ClientTransport(FaasWorker* parent, const std::string& func_name)
      : parent_(parent), func_name_(func_name) {}

   void write(const uint8_t* buf, uint32_t len) {
      out_buf_.write(buf, len);
   }

   uint32_t read(uint8_t* buf, uint32_t len) {
      return in_buf_.read(buf, len);
   }

   uint32_t readAll(uint8_t* buf, uint32_t len) {
      return in_buf_.readAll(buf, len);
   }

   void flush() override {
      uint8_t* data;
      uint32_t data_length;
      out_buf_.getBuffer(&data, &data_length);
      const char* output;
      size_t output_length;
      if (parent_->invoke_func_fn_(parent_->caller_context_, func_name_.c_str(),
                                   reinterpret_cast<const char*>(data),
                                   static_cast<size_t>(data_length),
                                   &output, &output_length) != 0) {
         throw apache::thrift::transport::TTransportException(
         apache::thrift::transport::TTransportException::UNKNOWN, "invoke_func call failed");
      }
      out_buf_.resetBuffer();
      in_buf_.resetBuffer(reinterpret_cast<uint8_t*>(const_cast<char*>(output)),
                          static_cast<uint32_t>(output_length));
      }

private:
   FaasWorker* parent_;
   std::string func_name_;
   apache::thrift::transport::TMemoryBuffer in_buf_;
   apache::thrift::transport::TMemoryBuffer out_buf_;
};
```

- almost all the serverless functions invoke `flush()`.

![s2](/assets/2023-12-06/s2.png)

- also, in real workloads, the way how one serverless function is declared is different from the sample code
	+ For example in [MovieReviewService.cpp](https://github.com/zyuxuan0115/nightcore-test/blob/main/moviereview_singlenode/DeathStarBench/mediaMicroservices/src/MovieReviewService/MovieReviewService.cpp)



### The call graph of the socialNetwork workload
![call_graph](/assets/2023-12-06/socialNet_arch.png)

- example: `Unique ID` only calls `Compose Post`
	+ in UniqueIdService's `faas_create_func_worker`, it calls [faas_worker->SetProcessor()](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/UniqueIdService.cpp#L56)
		* it sets the processor to be [UniqueIdServiceProcessor](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/gen-cpp/UniqueIdService.h#L212) which takes a [UniqueIdHandler](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/UniqueIdHandler.h#L50) as argument.
		* this means the serverless function to be processed is `Unique ID service`
	+ then in `faas_func_call`, it calls [faas_worker->Process()](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/UniqueIdService.cpp#L72)
		* in `class FaasWorker`'s [Process()](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/FaasWorker.h#L35) function, `Processor->Process()` will be called. 
	+ the `faas_worker->SetProcessor` and `faas_worker->Process` functions are both in [FaasWorker.h](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/FaasWorker.h) 
		* <strong>my guess</strong>: [process_UploadUniqueId()](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/gen-cpp/UniqueIdService.cpp#L342) in `UniqueIdServiceProcessor` class is the function that override `Processor->Precess()`
	+ another thing to be noticed
		* in unique ID's serverless function, [faas_worker->SetProcessor()](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/UniqueIdService.cpp#L56) also pass the callee function `compose post` as an argument 

- <a name="things-to-compile">based</a> on the `Unique ID`, to generate the `libUniqueIdService.so`, we need at least the following files
	+ `src/UniqueIdService/UniqueIdService.cpp`
	+ `src/UniqueIdService/UniqueIdHandler.h`
	+ `src/FaasWorker.h`
	+ `gen-cpp/UniqueIdService.cpp`
	+ `gen-cpp/UniqueIdService.h`
	+ `gen-cpp/ComposePostService.cpp`
	+ `gen-cpp/ComposePostService.h`

### make the compilation of SocialNetwork workloads work
- unfortunately the serverless functions are compiled by `CMake`
	+ we are using `clang` + `opt`, so we need to convert CMake to normal shell commands.
	+ <strong>[the tutorial for cmake](https://www.internalpointers.com/post/modern-cmake-beginner-introduction)</strong>
	+ to run cmake, we need to install several dependencies:
		* <strong>from this [link](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/docker/cpp-microservice-deps/Dockerfile)</strong>
		* `nlohmann-json3-dev` (the c++ json parser): `sudo apt-get install nlohmann-json3-dev`
		* `boost library`: `sudo apt-get install libboost-all-dev`
		* also the `#include <memory>` & `#include <string_view>` in the workloads require adding `-std=c++17` to the makefile
- consider compiling `unique ID service`
	+ this is its [CMakeList.txt](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/CMakeLists.txt)
	+ previously we have [6 files](#things-to-compile) that must be compiled in order to generate `libUniqueIdService.so`
	+ particularly, the RPC `invoke_func_fn` is in a `.h` file [FaasWorker.h](https://github.com/zyuxuan0115/nightcore-test/blob/main/moviereview_singlenode/DeathStarBench/mediaMicroservices/src/FaasWorker.h)
		* how does clang convert functions in `.h` file into IR?
		* I tested a simple example

- the structure of the files

```bash
test
├── build1.sh
├── header
│   ├── header.h
│   └── main
│       └── main.c
├── header1.h
```


```c
#include "../header.h"
int main(){
  int num = 1965;
  if (isEvenNum(num)) printf("%d is a even number\n", num);
  else printf("%d is not a even number\n", num);
  return 0;
}
```

- and its header

```c
#include <stdbool.h>
#include "../header1.h"
bool isEvenNum(int num){
  if (num%2==0){ printThings(); return true;}
  else return false;
}
```

- and its header

```c
#include <stdio.h>
void printThings(){
  printf("it's an even number\n");
}
```

compile it with `clang -fPIC -emit-llvm -S header/main/main.c -c -o main.ll`

- the output `main.ll` contains `main`, `isEvenNum` and `printThings`

```llvm
; ModuleID = 'header/main/main.c'
source_filename = "header/main/main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [20 x i8] c"find a even number\0A\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"%d is a even number\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"%d is not a even number\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define void @printThings() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define zeroext i1 @isEvenNum(i32 %0) #0 {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = srem i32 %4, 2
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  call void @printThings()
  store i1 true, i1* %2, align 1
  br label %9

8:                                                ; preds = %1
  store i1 false, i1* %2, align 1
  br label %9

9:                                                ; preds = %8, %7
  %10 = load i1, i1* %2, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1965, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = call zeroext i1 @isEvenNum(i32 %3)
  br i1 %4, label %5, label %8

5:                                                ; preds = %0
  %6 = load i32, i32* %2, align 4
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i32 %6)
  br label %11

8:                                                ; preds = %0
  %9 = load i32, i32* %2, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0), i32 %9)
  br label %11

11:                                               ; preds = %8, %5
  ret i32 0
}
```

- this case show that if the `#include <some header>`'s path is correct, the functions in header files will also be compiled into IR.

- now let's take a look at the relationship of `UniqueIdService` with `FaasWorker`
	+ in [src/UniqueIdService/UniqueIdService.cpp](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/UniqueIdService.cpp#L16), it includes [src/UniqueIdService/UniqueIdHandler.h](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/UniqueIdHandler.h) 
	+ in [src/UniqueIdService/UniqueIdHandler.h](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/UniqueIdHandler.h), it includes [src/ClientiPool.h](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/UniqueIdService/UniqueIdHandler.h#L19)
	+ in [src/ClientPool.h](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/ClientPool.h), it includes [src/FaasWorker.h](https://github.com/ut-osa/nightcore-benchmarks/blob/master/workloads/DeathStarBench/socialNetwork/src/FaasWorker.h)

- so, the IR code of `parent_->invoke_func_fn_` must also be in the address space
	+ and we can replace it 
