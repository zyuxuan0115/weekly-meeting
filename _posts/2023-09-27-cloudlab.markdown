---
layout: post
title:  "2023-9-27 Cloudlab"
date:   2023-9-27 1:53:46 -0500
categories: serverless functions
---
### Acquire cloudlab account and setup servers
- to get start -> [here](https://docs.cloudlab.us/getting-started.html)
	+ profile selected is `m510` (according to Haoran)
- the size of the root dir is too small.
	+ larger storage is at `/proj/zyuxuanssf-PG0` 
	+ ![here](/assets/2023-09-27/s1.png) 

### Build nightcore
- [github page](https://github.com/ut-osa/nightcore/tree/asplos-release) of nightcore
	+ `git clone --recurse-submodules git@github.com:ut-osa/nightcore.git`
	+ need to install 
		* [the newest version of cmake](https://cmake.org/download/)
		* [gcc-10](http://www.netgull.com/gcc/releases/gcc-10.1.0/)
			- `./configuration --prefix=/proj/zyuxuanssf-PG0/gcc-10`
			- after building gcc-10, `export CXX=/proj/zyuxuanssf-PG0/gcc-10`
	+ `./build_deps.sh`
	+ Before compilation, need to comment out `nightcore/src/common/stat.h`'s line #236 
	+ `make -j`	

### Run C example of nightcore
- in `nightcore/examples/c`, when running `run_stack.sh`
	+ From `nightcore/examples/c/outputs/launcher_foo.log`, get an error msg:
		* `/usr/lib/x86_64-linux-gnu/libstdc++.so.6: version 'CXXABI_1.3.11' not found`
	+ to fix this problem
		```bash
		> sudo find / -name 'libstdc++.so.6'
		> export LD_LIBRARY_PATH="/proj/zyuxuanssf-PG0/gcc-10/lib64" 
		```

### About curl
- nightcore uses `curl -X POST -d "Hello" http://127.0.0.1:8080/function/Foo` to run `Foo` 
	+ send HTTP POST request with data "Hello" to local serverless function `Foo`
	+ `Foo` then calls local `Bar` function
- From `man curl`
	+ `curl` is a tool to transfer data from or to a server, using one of the supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP). The command is designed to work without user interaction. 
	+ `-X, --request <command>`
		* (HTTP) Specifies a custom request method to use when communicating with the HTTP server.  
		* The specified request method will be used instead of the method otherwise used (which defaults to GET). Common additional HTTP requests include PUT and DELETE.
	+ `-d, --data <data>`
		* (HTTP) Sends the specified data in a POST request to the HTTP server

### Make Foo call remote Bar
- What we need
	+ local `Foo` calls remote `Bar`
	+ local `Foo` calls local `Bar`
	+ measure the performance of both cases
- How `Bar` is called
	+ In [foo.c code](https://github.com/ut-osa/nightcore/blob/asplos-release/examples/c/foo.c#L39) 
```c++
int ret = context->invoke_func_fn(
					context->caller_context, "Bar", input, input_length,
					&bar_output, &bar_output_length);
```
- the type of `invoke_func_fn` is `faas_invoke_func_fn_t`.
	+ the type define of `faas_invoke_func_fn_t` is in [nightcore/include/faas/worker_v1_interface.h](https://github.com/ut-osa/nightcore/blob/asplos-release/include/faas/worker_v1_interface.h#L22)	
	+ a little new knowledge of C/C++'s [typedef of function pointer](https://stackoverflow.com/questions/4295432/typedef-function-pointer)
- in `Foo`,
	+ `faas_create_func_worker`, `faas_destroy_func_worker`, `faas_func_call`, `faas_init` are reloaded.
		* the original "virtual functions" are all in [nightcore/include/faas/worker_v1_interface.h](https://github.com/ut-osa/nightcore/blob/asplos-release/include/faas/worker_v1_interface.h#L22)	
	+ 
 
### Performance measurements
- In C example, I measured the execution time of local call
```

```
