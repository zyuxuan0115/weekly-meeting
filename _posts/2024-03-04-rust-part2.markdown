---
layout: post
title:  "2024-03-04 Rust part2"
date:   2024-03-04 1:53:49 -0500
categories: serverless functions
---
## From Rust [tutorial](https://doc.rust-lang.org/book/)
### Chapter 5
- structs are more flexible than tuples: you don’t have to rely on the order of the data to specify or access the values of an instance.

```rust
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}

fn main() {
    // the entire instance must be mutable; Rust doesn’t allow us to mark only certain fields as mutable.
    let mut user1 = User {
        active: true,
        username: String::from("someusername123"),
        email: String::from("someone@example.com"),
        sign_in_count: 1,
    };
    user1.email = String::from("anotheremail@example.com");
    // create one instance from another instance
    let user2 = User {
        email: String::from("another@example.com"),
        ..user1
    };
}
```

- Note that the struct update syntax uses = like an assignment; this is because it moves the data, just as we saw in the “Variables and Data Interacting with Move” section. In this example, we can no longer use user1 as a whole after creating user2 because the String in the username field of user1 was moved into user2.

- a builder function of a struct

```rust
fn build_user(email: String, username: String) -> User {
    User {
        active: true,
        username,
        email,
        sign_in_count: 1,
    }
}
```

#### tuple struct
Tuple structs are useful when you want to give the whole tuple a name and make the tuple a different type from other tuples, and when naming each field as in a regular struct would be verbose or redundant.

```rust
struct Color(i32, i32, i32);
struct Point(i32, i32, i32);

fn main() {
    // the black and origin values are different types
    let black = Color(0, 0, 0);
    let origin = Point(0, 0, 0);
}
```

#### Unit-Like Structs Without Any Fields
later we’ll implement behavior for this type such that every instance of AlwaysEqual is always equal to every instance of any other type, perhaps to have a known result for testing purposes.

```rust
struct AlwaysEqual;

fn main() {
    let subject = AlwaysEqual;
}
```

- Lifetimes ensure that the data referenced by a struct is valid for as long as the struct is.
- So the following code won't work. 

```rust
struct User {
    active: bool,
    username: &str,
    email: &str,
    sign_in_count: u64,
}

fn main() {
    let user1 = User {
        active: true,
        username: "someusername123",
        email: "someone@example.com",
        sign_in_count: 1,
    };
}
```


- The `println!` macro can do many kinds of formatting, and by default, the curly brackets tell `println!` to use formatting known as Display: output intended for direct end user consumption.
	+ structs don’t have a provided implementation of Display to use with `println!` and the `{}` placeholder.
  + Rust does include functionality to print out debugging information, but we have to explicitly opt in to make that functionality available for our struct. To do that, we add the outer attribute `#[derive(Debug)]` just before the struct definition

```rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };
    println!("rect1 is {:?}", rect1);
}
```

- Another way to print out a value using the Debug format is to use the `dbg!` macro, which takes ownership of an expression (as opposed to `println!`, which takes a reference), prints the file and line number of where that `dbg!` macro call occurs in your code along with the resultant value of that expression, and returns ownership of the value.
	+ Calling the dbg! macro prints to the standard error console stream (`stderr`), as opposed to `println!`, which prints to the standard output console stream (`stdout`)

```rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}
fn main() {
    let scale = 2;
    let rect1 = Rectangle {
        width: dbg!(30 * scale),
        height: 50,
    };
    dbg!(&rect1);
}
```

#### Method
- Unlike functions, methods are defined within the context of a struct (or an enum or a trait object, and <strong>their first parameter</strong> is always `self`, which represents the instance of the struct the method is being called on.

```rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!(
        "The area of the rectangle is {} square pixels.",
        rect1.area()
    );
}
```

- We start an `impl` (implementation) block for `Rectangle`. Everything within this `impl` block will be associated with the `Rectangle` type.
- Methods can <strong>take ownership</strong> of `self`, <strong>borrow</strong> `self` <strong>immutably</strong>, or <strong>borrow</strong> `self` <strong>mutably</strong>

- when you call a method with object.something(), Rust automatically adds in &, &mut, or * so object matches the signature of the method. In other words, the following are the same: (No C style `object poioner -> mechod`, all in `.`)

```rust
p1.distance(&p2);
(&p1).distance(&p2);
```

#### Associated Functions
- All functions defined within an impl block are called associated functions because they’re associated with the type named after the `impl`. We can define associated functions that don’t have `self` as their first parameter (and thus are not methods) because they don’t need an instance of the type to work with.
    + Associated functions that aren’t methods are often used for constructors that will return a new instance of the struct.

```rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}
impl Rectangle {
    fn square(size: u32) -> Self {
        Self {
            width: size,
            height: size,
        }
    }
}

fn main() {
    let sq = Rectangle::square(3);
}
```


### Chapter 6

```rust
enum IpAddrKind {
    V4,
    V6,
}
let four = IpAddrKind::V4;
let six = IpAddrKind::V6;
```

both values `IpAddrKind::V4` and `IpAddrKind::V6` are of the same type: `IpAddrKind`.

- Rather than an enum inside a struct, we can put data directly into each enum variant.

```rust 
enum IpAddr {
   V4(String),
   V6(String),
}
let home = IpAddr::V4(String::from("127.0.0.1"));
let loopback = IpAddr::V6(String::from("::1"));
```

- the name of each enum variant that we define also becomes a function that constructs an instance of the `enum`. That is, `IpAddr::V4()` is a function call that takes a String argument and returns an instance of the `IpAddr` type.

- each variant in `enum` can have different types and amounts of associated data.

```rust
enum IpAddr {
   V4(u8, u8, u8, u8),
   V6(String),
}
let home = IpAddr::V4(127, 0, 0, 1);
let loopback = IpAddr::V6(String::from("::1"));
```

- we’re also able to define methods on enums. 

```rust
enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}
impl Message {
    fn call(&self) {
    // method body would be defined here
    }
}
let m = Message::Write(String::from("hello"));
m.call();
```

#### Option: important enum type
- The Option type encodes the very common scenario in which a value could be something or it could be nothing.
- Rust doesn’t have the `null` feature that many other languages have.
	+ It does have an enum that can encode the concept of a value being present or absent, it is defined by the standard library as follows:

```rust
enum Option<T> {
    None,
    Some(T),
}
```

- you can use `Some` and `None` directly without the `Option::` prefix.

```rust
let some_number = Some(5);
let some_char = Some('e');
let absent_number: Option<i32> = None;
```

#### The match Control Flow Construct
- values go through each pattern in a match, and at the first pattern the value “fits,” the value falls into the associated code block to be used during execution.

```rust
fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => {
            println!("Lucky penny!");
            1
        }
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    }
}
```

- The code associated with each arm is an expression, and the resultant value of the expression in the matching arm is the value that gets returned for the entire match expression.

```rust
fn plus_one(x: Option<i32>) -> Option<i32> {
    match x {
        None => None,
        Some(i) => Some(i + 1),
    }
}
let five = Some(5);
let six = plus_one(five);
let none = plus_one(None);
```

- `Matches` in Rust are exhaustive: we must exhaust every last possibility in order for the code to be valid.

#### the _ Placeholder
Using enums, we can also take special actions for a few particular values, but for all other values take one default action.

- Note that we have to put the catch-all arm last because the patterns are evaluated in order.
- `_` is a special pattern that matches any value and does not bind to that value. 

```rust
let dice_roll = 9;
match dice_roll {
    3 => add_fancy_hat(),
    7 => remove_fancy_hat(),
    _ => (),
}

fn add_fancy_hat() {}
fn remove_fancy_hat() {}
```

Nothing else happens on your turn if you roll anything other than a 3 or a 7. We can express that by using the unit value as the code that goes with the `_` arm.

#### if let
```rust
let config_max = Some(3u8);
if let Some(max) = config_max {
   println!("The maximum is configured to be {}", max);
}
```
 - The syntax `if let` takes a pattern and an expression separated by an equal sign. It works the same way as a `match`, where the expression is given to the match and the pattern is its first arm.

- The code in the `if let` block isn’t run if the value doesn’t match the pattern.

- In other words, you can think of if let as syntax sugar for a match that runs code when the value matches one pattern and then ignores all other values.

```rust
let mut count = 0;
if let Coin::Quarter(state) = coin {
   println!("State quarter from {:?}!", state);
} else {
   count += 1;
}
```

- We can include an `else` with an `if let`. The block of code that goes with the `else` is the same as the block of code that would go with the `_` case in the match expression.

### Chatper 7
- <strong>Packages</strong>: A Cargo feature that lets you build, test, and share crates
  + A package contains a `Cargo.toml` file that describes how to build those crates.
  + A package can contain as many binary crates as you like, but at most only one library crate.
  + A package can have multiple binary crates by placing files in the `src/bin` directory: each file will be a separate binary crate. 
- <strong>Crates</strong>: A tree of modules that produces a library or executable
- <strong>Modules and use</strong>: Let you control the organization, scope, and privacy of paths
- <strong>Paths</strong>: A way of naming an item, such as a struct, function, or module
  + the `use` keyword that brings a path into scope
  + the `pub` keyword to make items public

#### Modules Cheat Sheet 
- Start from the crate root: When compiling a crate, the compiler first looks in the crate root file (usually `src/lib.rs` for a library crate or `src/main.rs` for a binary crate) for code to compile.
- Declaring modules: In the crate root file, you can declare new modules; say, you declare a “garden” module with `mod garden;`. The compiler will look for the module’s code in these places:
	+ Inline, within curly brackets that replace the semicolon following `mod garden`
	+ In the file `src/garden.rs`
	+ In the file `src/garden/mod.rs`
- Declaring submodules: In any file other than the crate root, you can declare submodules. For example, you might declare mod vegetables; in `src/garden.rs`. The compiler will look for the submodule’s code within the directory named for the parent module in these places:
	+ Inline, directly following `mod vegetables`, within curly brackets instead of the semicolon
	+ In the file `src/garden/vegetables.rs`
	+ In the file `src/garden/vegetables/mod.rs`
- <strong>Paths to code in modules</strong>: Once a module is part of your crate, you can refer to code in that module from anywhere else in that same crate, as long as the privacy rules allow, using the path to the code. For example, an Asparagus type in the garden vegetables module would be found at `crate::garden::vegetables::Asparagus`.
- <strong>Private vs public</strong>: Code within a module is private from its parent modules by default. To make a module public, declare it with `pub mod` instead of `mod`. To make items within a public module public as well, use `pub` before their declarations.
- <strong>The use keyword</strong>: Within a scope, the use keyword creates shortcuts to items to reduce repetition of long paths.

- By using modules, we can group related definitions together and name why they’re related.

Filename `src/lib.rs`

```rust
mod front_of_house {
    mod hosting {
        fn add_to_waitlist() {}

        fn seat_at_table() {}
    }

    mod serving {
        fn take_order() {}

        fn serve_order() {}

        fn take_payment() {}
    }
}
```

```bash
crate
 └── front_of_house
     ├── hosting
     │   ├── add_to_waitlist
     │   └── seat_at_table
     └── serving
         ├── take_order
         ├── serve_order
         └── take_payment
```

- If module A is contained inside module B, we say that module A is the child of module B and that module B is the parent of module A.
