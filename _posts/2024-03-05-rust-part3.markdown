---
layout: post
title:  "2024-03-05 Rust part3"
date:   2024-03-05 1:53:49 -0500
categories: serverless functions
---
## Chapter 8
### vector
#### create a vector

```rust
let v1: Vec<i32> = Vec::new();
let v2 = vec![1, 2, 3];
let mut v3 = Vec::new();
v3.push(5);
v3.push(6);
v3.push(7);
v3.push(8);
```

#### Reading Elements of Vectors

- There are two ways to reference a value stored in a vector: via indexing or using the `get` method.
	+ Using `&` and `[]` gives us a reference to the element at the index value.

```rust
let v = vec![1, 2, 3, 4, 5];
let third: &i32 = &v[2];
println!("The third element is {third}");

let third: Option<&i32> = v.get(2);
match third {
   Some(third) => println!("The third element is {third}"),
   None => println!("There is no third element."),
}
```

#### Iterating over the Values in a Vector

```rust
let mut v = vec![100, 32, 57];
for i in &mut v {
   *i += 50;
}
```

here `&mut` means

- We can also iterate over mutable references to each element in a mutable vector in order to make changes to all the elements.
- We have to use the `*` dereference operator to get to the value in `i` before we can use the `+=` operator. 

#### Combining with enum to store multiple types

```rust
enum SpreadsheetCell {
  Int(i32),
  Float(f64),
  Text(String),
}

let row = vec![
  SpreadsheetCell::Int(3),
  SpreadsheetCell::Text(String::from("blue")),
  SpreadsheetCell::Float(10.12),
];
```

- Like any other struct, a vector is freed when it goes out of scope.
- When the vector gets dropped, all of its contents are also dropped.

#### String
The `String` type, which is provided by Rust’s standard library rather than coded into the core language, is a growable, mutable, owned, UTF-8 encoded string type.

`String` is actually implemented as a wrapper around a vector of bytes with some extra guarantees, restrictions, and capabilities.

- convert String literal to String

```rust
let s = "initial contents".to_string();
let s = String::from("initial contents");
```

- Concatenation

```rust
let mut s = String::from("foo");
s.push_str("bar");

let mut s = String::from("lo");
s.push('l');

let s1 = String::from("Hello, ");
let s2 = String::from("world!");
let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used
```

- we can only add a &str to a String; we can’t add two String values together

- the `format!` macro

```rust
let s1 = String::from("tic");
let s2 = String::from("tac");
let s3 = String::from("toe");

let s = format!("{s1}-{s2}-{s3}");
```

The `format!` macro works like `println!`, but instead of printing the output to the screen, it returns a String with the contents.

- UTF-8
	+ Rust string is in UTF-8 so each charactor may be 1 byte, 2 bytes ... So It doesn't support string indexing.
	+ to iterate over strings, the best way is this:

```rust
for c in "Зд".chars() {
    println!("{c}");
}
// output
// З
// д
```

or

```rust
for b in "Зд".bytes() {
    println!("{b}");
}
// output
// 208
// 151
// 208
// 180
```

#### HashMap
